// Generated by CoffeeScript 1.10.0
var Model, Toast, isServer, racer,
  hasProp = {}.hasOwnProperty;

racer = require('k-model');

Model = racer.Model;

isServer = racer.util.isServer;

Toast = (function() {
  var defaultOptions;

  function Toast() {}

  Toast.prototype.view = __dirname + '/k-toast.html';

  defaultOptions = {
    sticky: false,
    timeout: 10000
  };

  Model.prototype.toast = function(type, msg, options) {
    var key, remove, sticky, t, timeout, toast, val;
    if (typeof type === 'object') {
      options = msg;
      for (key in type) {
        if (!hasProp.call(type, key)) continue;
        val = type[key];
        t = key;
        msg = val;
      }
      type = t;
    }
    sticky = (options != null ? options.sticky : void 0) || defaultOptions.sticky;
    timeout = (options != null ? options.timeout : void 0) || defaultOptions.timeout;
    toast = {
      id: this.id(),
      type: type,
      msg: msg
    };
    if (options != null ? options.click : void 0) {
      toast.click = options.click;
    }
    if (isServer) {
      this.root.set('_page.isServer', true);
      this.root.set('_page.timeout', timeout);
    }
    remove = (function(_this) {
      return function() {
        var i, j, len, toasts;
        toasts = _this.root.get('_page.toast');
        if (toasts) {
          for (i = j = 0, len = toasts.length; j < len; i = ++j) {
            t = toasts[i];
            if (t.id === toast.id) {
              if (t.click) {
                t.click();
              }
              _this.root.remove('_page.toast', i);
              return;
            }
          }
        }
      };
    })(this);
    return this.root.unshift('_page.toast', toast, function(err) {
      if (!sticky) {
        return setTimeout(remove, timeout);
      }
    });
  };

  Toast.prototype.remove = function(i) {
    return this.model.root.remove('_page.toast', i);
  };

  return Toast;

})();

module.exports = Toast;
